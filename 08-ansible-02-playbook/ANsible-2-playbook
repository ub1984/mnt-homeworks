Основные компоненты плейбука:

Хосты (hosts): Определение группы или списка целевых хостов, на которых должны выполняться задачи.

Задачи (pre_tasks): Необязательный параметр, который выполняется перед roles и task, могут обращатся к handlers

*Задачи (tasks): Инструкции, которые должны быть выполнены на целевых хостах. 
    Задачи обычно определяются в виде списка, каждая задача может включать в себя различные модули Ansible и их параметры.

*Роли (roles): перечисление ролей, которые необходимо выполнить на хостах, могут обращатся к handlers (НЕ рекомендуется указывать елши есть tasks)

Задачи (post_tasks): Необязательный параметр, который выполняется после roles и task

Переменные (variables): Можно определять переменные в плейбуке или ссылаться на переменные из других 
источников, таких как инвентарный файл или файлы переменных ролей.

Шаблоны (templates): В плейбуке можно использовать шаблоны для генерации конфигурационных файлов или 
других текстовых файлов на основе переменных или данных.

Обработчики (handlers): оброботчики событий, запускаются, если каке-то tasks или role обратилась к handlers 

(tags) позволяет группировать roles, tasks и вызывать их отдельно от остальных сущностей

Плейбуки могут также включать другие плейбуки: Это позволяет создавать модульные и переиспользуемые конфигурационные файлы.

Пример простого плейбука:

    yaml

        ---
        - name: Установить и запустить веб-сервер
        hosts: webservers
        tasks:
            - name: Установить Apache
            yum:
                name: httpd
                state: present
            become: yes
            
            - name: Запустить Apache
            service:
                name: httpd
                state: started
            become: yes

## Параметры

    any_errors_fatal - выполнение плейбука будет остановлено немедленно, если произойдет любая ошибка на одном из хостов, остановит выполнение на всекх хостах
    
    become - озволяет выполнить задачи от имени другого пользователя или привилегированного пользователя (например, с правами суперпользователя root на UNIX-системах) с использованием средств, таких как sudo или su.

    become_user - позволяет выбрать пользователя, под которым будут повышаться привилегии

    check_mode - булева переменная, помогает определить, происходит ли запуск в check моде 

    ckllections - только для Play, позволяет указать имена коллекций (при исполнении таски будет искать в той коллекции которая указана)

    debugger - только для play, позволяет запустить дебагер

    diff - переключатель вывода информации 

    force_hendlers - запускает все hendlers

    gsther_facts - булева переменная (выполнять сбор фактов или нет)

    ignore_errors - позволяет игнорировать ошибки в tasks и продолжить выполнение play

    ignore_unreachable - позволяет игнорировать ошибки делоступности хоста и продолжить выполнение play

    max_fail_percentage - процент ошибок среды выполнения tasks для продолжения play

    order - порядок сортировки хостов invenory

    run_once - запускает play только на первом хосте из invenory в рамках batch

пример 

    yml 

---
- name: Пример использования параметров Ansible
  hosts: all
  gather_facts: no  # Отключаем сбор фактов об узлах

  tasks:
    - name: Установить пакет Apache
      yum:
        name: httpd
        state: present
      become: yes  # Поднимаем привилегии, чтобы установить пакет

    - name: Настроить файл конфигурации Apache
      template:
        src: templates/httpd.conf.j2
        dest: /etc/httpd/httpd.conf
      become: yes  # Поднимаем привилегии, чтобы изменить файл конфигурации

    - name: Проверить конфигурацию Apache
      command: httpd -t
      register: apache_config_check
      ignore_errors: yes  # Игнорируем ошибки, чтобы не остановить выполнение плейбука

    - name: Перезапустить службу Apache
      service:
        name: httpd
        state: restarted
      become: yes  # Поднимаем привилегии, чтобы перезапустить службу

  handlers:
    - name: Перезагрузить Apache
      service:
        name: httpd
        state: restarted
      become: yes  # Поднимаем привилегии, чтобы перезапустить службу

  any_errors_fatal: true  # Остановить выполнение плейбука при любой ошибке на хосте
  run_once: true  # Запустить плейбук только на одном хосте из инвентаризации



   
## Tags - позволяет отметить сущность Ansible для отдельного использования

При работаете с большими плейбуками или ролями, использование меток (tags) в Ansible может быть очень 
полезным для выборочного выполнения определенных частей кода.

always - выполняется всегда, если яно не указано пропустить
never - не выполняется никогда, если явно не указано запустить

--tags all
--tags tagged
--tags untagged
--tags [tag1,tag2]
--skip-tags [1,2]
--list-tags
--list-tasks (with --tags or --skip-tags)

пример

    ---
    - name: Пример использования меток в Ansible
    hosts: all
    tasks:
        - name: Установить пакет Apache
        yum:
            name: httpd
            state: present
        tags:
            - install_apache

        - name: Настроить файл конфигурации Apache
        template:
            src: templates/httpd.conf.j2
            dest: /etc/httpd/httpd.conf
        tags:
            - configure_apache

        - name: Перезапустить службу Apache
        service:
            name: httpd
            state: restarted
        tags:
            - restart_apache

В этом примере каждая задача имеет свою метку (tags). При запуске плейбука можно указать определенные метки для выполнения только задач с этими метками. Например:

    ansible-playbook playbook.yml --tags "install_apache,configure_apache"

    Эта команда выполнит только задачи с метками install_apache и configure_apache




## Playbook

ansible-playbook -i invenory/prod.yml site.yml --check #тестовый запуск без внесений изменений на системе

ansible-playbook -i invenory/prod.yml site.yml --start-at-task "тут название таски" # запуск плейбоок с конкретной таски

ansible-playbook -i invenory/prod.yml site.yml --step # пошаговое выполнение 

# debugger: always, on_failed

запускается при первойже таске >p task.args # все аргументы таски

>p task.vars # все переменные таски

>R # повторение исполнения текущей таски

>С # продолжение исполнения плейбука 

>Q # выход 


## Логирование

ansible-playbook -i invenory/prod.yml site.yml -vvv #(ansible поддерживает 6 уровней логирования)
